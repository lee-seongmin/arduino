중요 
Parallel 한번에 주고받고한다. Serial의 100배  
단점 : wire가 많다. 부피가 커진다.

Serial Parallel의 1/10속도 noise에 취약하다. 

Uart ==> Parity bit가 존재한다.

I2C ==> Uart보다 많이 쓰인다. uart보다 2배 많이 쓰인다.

통신~! 내가 원하는 데이터를 주고 받고 하는 것을 잘 해야한다.

데이터 통신에는 보통 falling edge일때 데이터를 받아오고 clock이 있어야 한다.

비동기 Serial통신
9600 baud : rate 초당 9600 bit를 읽는다.

프로토콜 : 

packet(7~13bit) start bit(1bit) data bit(5~9bit) parity bit(0~1bit) stop bit(1~2bit)


uart-> 10bits 클럭이 없어서 비동기식이라 통신속도를 맞춰줘야 한다.
arduino-> 8N1 =>TX, RX : pull up이 되버린다. start bit = 0 -> stop bit = 1
초당 960개 정도 받는다.

아두이노에서는 최대 115200이 가능하다.

오실로스코프에서는 falling edge


I2C는 uart보다 빠르지만 느린 편이다. I2C설명 읽어보기. master기반

wire 라이브러리를 써야한다. A4, A5에 내부풀업이 자동으로 설정된다.
trigger를 폴링엣지로 설정해줘야한다.

프로토콜 : 한 개의 master에 128개의 slave를 붙일 수 있다.
slave는 주소를 가지고 있다. 0~127==> 7bit slave

start = 0 통신시작 slave (7bit) R/W bit (read=1, write=0)
4개의 data byte를 내보낸다.
역상비트
stop = 1로 준다.

1개의 숫자(1byte)를 설정하기 위해 20bit 100/20 =>5khz clock speed가 uart보다 빠르다.	

<"6주차 아두이노 퀴즈">
온습도 라이브러리를 사용해야한다.
union사용 배열 혹은 반복문 4개의 변수
온도를 master slave에서 읽어서 시리얼 모니터 상에 표시한다.

"SPI통신"

공통점 : 프로토콜이 있고 클럭주파수를 사용한다.
장점: 빠르다. 멀티슬레이브가능(I2C만큼 많이는 안된다.)
uart 10bit I2C는 20bit SPI는 데이터 비트를 보내는 게 없어서 빠르다.

클럭주파수를 최대 4mhz까지 가능 메인컨트롤러의 1/4까지 가능하다.
I2C가 100khz==> SPI 4mhz 40배의 속도로 보낼 수 있다.

half-duplex 가는 방향과 오는 방향이 한방향 ==> I2C
full-duplex 가는 방향과 오는 방향이 2방향 ==> SPI, UART

동기식 전송을 한다.

arduino uno에서 10~0까지를 slave를 거느릴수 있다. 11개의 slave생성

slave주소를 지정하지 않는다.
master=slave 10번핀에 직결한다.
5v로 되어있는 것을 0으로 내려버린다.

단점: 
arduino가 통신말고는 다른 역할을 할 수 없다.

wire를 많이 차지한다.

Parallel 통신을 안 쓰는 이유가 wire를 많이 차지하기 때문에 사용하지 않는다.

